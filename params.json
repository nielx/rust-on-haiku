{"name":"Rust-on-haiku","tagline":"Everything about using the Rust programming language on Haiku","body":"# Welcome to Rust for Haiku\r\nI have worked on a port of [Rust](http://rust-lang.org) to the [Haiku](http://www.haiku-os.org) operating system. Rust is a fast and safe programming language. And Haiku is an open source operating system that targets desktop computers.\r\n\r\n# Notes about porting\r\nThis is the nerdy stuff, so if you just want to install the rust compiler, please skip this.  \r\n\r\n## What you should know in advance\r\nThe rust compiler (rustc) is written in rust. That means that it requires a prebuilt rust compiler to compile the source. This means that in case you want to port Rust to another platform, you will always have to start off by creating an initial (or: stage0) compiler for the new platform. \r\n\r\nThe basic steps are:\r\n1. On the supported build platform, create a cross-compiler that can generate binaries for the Haiku platform.\r\n2. Using this cross-compiler, create a native compiler for Haiku.\r\n\r\nIn my case the host platform was Mac OS X Yosemite, but it should work on any platform that supports building Rust and building Haiku.\r\n\r\nThis brings me to another thing... cross-compiling is a bit of a maze. Now I built for Haiku, which has excellent support for [cross-compiling](https://www.haiku-os.org/guides/building) the whole OS on platforms like Mac OS X, Linux and FreeBSD. That means that a GCC cross-compiler is built, as well as important libraries and glue code that is needed to create native binaries.\r\n\r\n> NOTE: it is absolutely important that you understand that your target platform is itself cross compilable from your build platform. You cannot cross-compile for another platform without a cross-compiling toolchain and important OS glue code.\r\n\r\n## Step 1: creating a cross-compiler\r\nWhen cross-compiling, you always deal with three things:\r\n* the build platform where you build your tools\r\n* the host platform which will run your compiled code\r\n* the target platform that the binary on the host platform will generate code for.\r\n\r\nWhile in theory all three platforms can be different, in this (and most) cases one will build and run (host) _rustc_ on a single platform. \r\n\r\nRemember: the goal is to create a cross-compiler that will be able to create binaries for the `i686-unknown-haiku` platform. That makes our configuration as follows:\r\n\r\n    CFG_BUILD            := x86_64-apple-darwin\r\n    CFG_HOST             := x86_64-apple-darwin\r\n    CFG_TARGET           := x86_64-apple-darwin i686-unknown-haiku\r\n\r\n### Step 1.1: building Haiku\r\nThe first thing you should do is make sure you have compiled Haiku, with a GCC 4 compiler. The latter is important since Haiku in principle is built with GCC2. So the best point to get started is to configure the Haiku build, and run it to create at least a basic image so that some of the base libraries (like libroot.so) is ready. \r\n\r\n### Step 1.2: preparing the compiler\r\nSo let's say we built Haiku on a location we call `$(HAIKU_BUILD_PATH)`. Within the \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}